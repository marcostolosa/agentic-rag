import subprocess
import os

def run_nmap_scan(target: str, options: str = "-sC -sV") -> str:
    """
    Executa um scan Nmap no alvo e salva o resultado em 'documents/nmap_<target>.txt'.
    Retorna o caminho do arquivo gerado.
    """
    if not os.path.exists("documents"):
        os.makedirs("documents")
    safe_target = target.replace("/", "_").replace(" ", "_")
    file_name = f"nmap_{safe_target}.txt"
    file_path = os.path.join("documents", file_name)
    cmd = ["nmap"] + options.split() + [target, "-oN", file_path]
    subprocess.run(cmd, check=True)
    return file_path

def run_nikto_scan(target: str, options: str = "") -> str:
    """
    Executa um scan Nikto no alvo (host ou URL) e salva em 'documents/nikto_<target>.txt'.
    """
    if not os.path.exists("documents"):
        os.makedirs("documents")
    safe_target = target.replace("/", "_").replace(":", "_")
    file_name = f"nikto_{safe_target}.txt"
    file_path = os.path.join("documents", file_name)
    cmd = ["nikto", "-h", target] + options.split()
    with open(file_path, "w") as f:
        subprocess.run(cmd, stdout=f, stderr=subprocess.STDOUT, check=True)
    return file_path

def run_gobuster_scan(target: str, wordlist: str = "/usr/share/wordlists/dirb/common.txt", extensions: str = "") -> str:
    """
    Executa um scan Gobuster de diret√≥rios e salva em 'documents/gobuster_<target>.txt'.
    """
    if not os.path.exists("documents"):
        os.makedirs("documents")
    safe_target = target.replace("/", "_").replace(":", "_")
    file_name = f"gobuster_{safe_target}.txt"
    file_path = os.path.join("documents", file_name)
    cmd = ["gobuster", "dir", "-u", target, "-w", wordlist]
    if extensions:
        cmd += ["-x"] + extensions.split(",")
    with open(file_path, "w") as f:
        subprocess.run(cmd, stdout=f, stderr=subprocess.STDOUT, check=True)
    return file_path
    
def run_searchsploit(cve_id: str) -> str:
    """
    Executa uma busca no Exploit-DB usando a ferramenta searchsploit para um dado CVE e salva em 'documents/exploitdb_<cve_id>.json'.
    Retorna o caminho do arquivo gerado.
    """
    if not os.path.exists("documents"):
        os.makedirs("documents")
    safe_id = cve_id.replace("/", "_").replace(" ", "_")
    file_name = f"exploitdb_{safe_id}.json"
    file_path = os.path.join("documents", file_name)
    # Usa output JSON do searchsploit
    cmd = ["searchsploit", "-j", cve_id]
    with open(file_path, "w") as f:
        subprocess.run(cmd, stdout=f, stderr=subprocess.STDOUT, check=True)
    return file_path